// Copyright 2018 The gVisor Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package stack

import (
	"sync"

	"golang.org/x/time/rate"
)

const (
	// icmpLimit is the default maximum number of ICMP messages permitted by this
	// rate limiter.
	icmpLimit = 1000

	// icmpBurst is the default number of ICMP messages that can be sent in a single
	// burst.
	icmpBurst = 50
)

// ICMPRateLimiter is a global rate limiter that controls the generation of
// ICMP messages generated by the stack.
type ICMPRateLimiter struct {
	mu sync.RWMutex
	l  *rate.Limiter
}

// NewICMPRateLimiter returns a global rate limiter for controlling the rate
// at which ICMP messages are generated by the stack.
func NewICMPRateLimiter() *ICMPRateLimiter {
	return &ICMPRateLimiter{l: rate.NewLimiter(icmpLimit, icmpBurst)}
}

// Allow returns true if we are allowed to send at least 1 message at the
// moment.
func (i *ICMPRateLimiter) Allow() bool {
	i.mu.RLock()
	allow := i.l.Allow()
	i.mu.RUnlock()
	return allow
}

// Limit returns the maximum number of ICMP messages that can be sent in one
// second.
func (i *ICMPRateLimiter) Limit() rate.Limit {
	i.mu.RLock()
	defer i.mu.RUnlock()
	return i.l.Limit()
}

// SetLimit sets the maximum number of ICMP messages that can be sent in one
// second.
func (i *ICMPRateLimiter) SetLimit(newLimit rate.Limit) {
	i.mu.RLock()
	defer i.mu.RUnlock()
	i.l.SetLimit(newLimit)
}

// Burst returns how many ICMP messages can be sent at any single instant.
func (i *ICMPRateLimiter) Burst() int {
	i.mu.RLock()
	defer i.mu.RUnlock()
	return i.l.Burst()
}

// SetBurst sets the maximum number of ICMP messages allowed at any single
// instant.
//
// NOTE: Changing Burst causes the underlying rate limiter to be recreated.
func (i *ICMPRateLimiter) SetBurst(burst int) {
	i.mu.Lock()
	i.l = rate.NewLimiter(i.l.Limit(), burst)
	i.mu.Unlock()
}
